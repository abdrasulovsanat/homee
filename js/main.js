//1. Создайте функцию, которая возвращает квадрат числа. Число передается аргументом(arrow function)

// function numFunc (a) {
//     console.log(a**2);
// };

// names(8);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//2. Напишите программу, где пользователь вводит любое целое положительное число. А программа суммирует все числа от 1 до введенного пользователем числа.
// Например:
// если пользователь введет число 3. Программа должна посчитать сумму чисел от 1 до 3, то есть 1+2+3 и выдать ответ 6.
// если пользователь введет число 5. Программа должна посчитать сумму чисел от 1 до 5, то есть 1+2+3+4+5 и выдать ответ 15.

// let askNum = +prompt('enter number >0')
// function numS (c){
//     let count = 1;
//     let res = 0;
//     while (count < askNum){
//         res = count + res;
//         count++;
//     }
//     return res;
// }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3. Создайте функцию, которая принимает параметром число от 1 до 7, а возвращает день недели.(function expression)
// const weekKeys = function(dayNumber) {
//     switch (dayNumber) {
//       case 1:
//         return 'Понедельник';
//         break;
//       case 2:
//         return 'Вторник';
//         break;
//       case 3:
//         return 'Среда';
//         break;
//       case 4:
//         return 'Четверг';
//         break;
//       case 5:
//         return 'Пятница';
//         break;
//       case 6:
//         return 'Суббота';
//         break;
//       case 7:
//         return 'Воскресенье';
//         break;
//       default:
//         return 'Такого дня недели нет!';
//     };
//   };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//4. Дан список строк: ['Tom', 'Jack', 'Jessica', 'Helen', 'Bob'], создать функцию, которая будет принимать в качестве аргументов массив со строками и функцию-обработчик, которая в свою очередь будет принимать строку и говорить длинна строки больше или меньше 4х символов, задача: вернуть массив из тех строк, длинна которых больше 4х символов

// let fstFunc = function(arr, Func) {
//   let res = [];
//   for (let i of arr) {
//     if (Func(i)) {
//       res.push(i);
//     }
//   }
//   return res;
// };

// let sndFunc = function(string) {
//   return string.length > 4;
// };

// let arr = ['Tom', 'Jack', 'Jessica', 'Helen', 'Bob','Iskender'];
// console.log(fstFunc(arr, sndFunc));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//5. Напишите функцию sumNum(), которая принимает целое число и возвращает сумму всех его цифр.
// Например, для числа 456, функция должна вернуть:
// 15
// так как 4 + 5 + 6 = 15

// function sumNum(num) {
//     num = String(num).split('');
//     let res = 0
//     for (i of num) {
//            res += +i;
//     }
//     return res
// };
// console.log(sumNum(456));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//6. Дана переменная let secretNum = 4; это загаданное число, задача: запрашивать у пользователя числа пока он не отгадает нужное число, учесть, что есть всего 3 попытки, после того как он использует все попытки вывести сообщение типа: Game over!, если он отгадал, то сообщение: You are win!

// let secretNum = 4;
// let attemts = 3;
// let anws;

// while (attemts > 0) {
//     anws = +prompt('Угадайте загаданное число)');
//     if (answ == secretNum) {
//         alert('Вы совершенно правы');
//         break
//     }
//     else {
//         attemts--;
//     }
//     if (attemts == 0) {
//         alert('У вас не осталось попыток')
//     };
// };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//7. Дана переменная let bank = 0; выступает в роли счета на котором лежат деньги, задача: создать 2 функции, которые будут пополнять и снимать деньги со счета, каждая функция в качестве аргумента должна принимать количество денег, чтобы положить/снять со счета, каждая операция должна сопровождаться сообщениями типа: Баланс пополнен на 1200$; или; С вашего счета снято 500$, также у функции для снятия денег должна быть проверка на достаточное количество средств для снятия, если денег недостаточно, выводить сообщение типа: У вас недостаточно средств

// let bank = 0;
// function add() {
//     let askNum = +prompt('Enter money')
//     bank = bank + askNum
//     alert(`Баланс будет пополнен на ${askNum}`)
//     return bank;
// }

// function del(cash) {
//     if (bank >= cash) {
//            bank -= cash;
//         alert(`С вашего счета снято ${cash}`)
//     return bank;
//     } else alert('У вас недостаточно средств!')
// };

// add()
// del(500)
// console.log(bank);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//8. Принимать от пользователя строки, пока сам пользователь не решит остановиться, затем создать функцию, которая будет принимать список из строк, которые ввел пользователь, и возвращать список состоящий из длинн этих строк

// let arrStrs = [];

// while (true) {
//     let strs = prompt('Введите строку');
//     arrStrs.push(strs);
//     let breakConf = confirm('Хотите продолжить добавить новые строки?');
//     if (!breakConf) break;
// };

// function strsFunc(arr) {
//     let newArr = [];

//     for(let i = 0; i < arr.length; i++){
//         newArr.push(arr[i].length);
//     };
//     return newArr;
// };
// console.log(strsFunc(arrStrs));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//10. Создать игру. Задача: создать программу, которая запрашивает у пользователя данные для 2х героев(сила(макс 100), ловкость(макс 100), стихия(огонь, земля, вода, воздух)), также каждому герою присваивается имя по умолчанию(герой 1, герой 2), каждая стихия повышает силу героя на определенное количество пунктов(огонь +20 к силе, воздух +15 к силе, вода +10 к силе, земля +5 к силе), после добавления героев в бд, устраивать между ними бой и выявлять победителя по следующим характеристикам(победил тот, у кого больше силы, если силы равны, побеждает тот, у кого больше ловкости, если все данные равны, то ничья), выводить информацию в виде имени победителя либо просто сообщение типа: Ничья, в том случае если победителя нет(решить помощью функций)

//! Шаблон объекта со статами героя

// function hero(name, strength, agility, element) {
//   this.name = name;
//   this.strength = strength;
//   this.agility = agility;
//   this.element = element;
// }

// //! Фунция создания героев

// function createHeroes() {
//   //! первый герой

//   let hero1Name = prompt("Придумайте имя первому герою:");
//   let hero1Strength = +prompt("Задайте силу первому герою (от 0-100):");
//   let hero1Agility = +prompt("Задайте ловкость первому герою  (от 0-100):");
//   let hero1Element = prompt(
//     "Выберите стихию первого героя (огонь, земля, вода, воздух):"
//   );

//   //! второй герой

//   let hero2Name = prompt("Придумайте имя второму герою:");
//   let hero2Strength = +prompt("Задайте силу второму герою (от 0-100):");
//   let hero2Agility = +prompt("Задайте ловкость второму герою (от 0-100):");
//   let hero2Element = prompt("Выберите стихию второго героя (огонь, земля, вода, воздух):"
//   );

//   //! присвоение введенных статов в шаблон объектов

//   let hero1 = new hero(hero1Name, hero1Strength, hero1Agility, hero1Element);
//   let hero2 = new hero(hero2Name, hero2Strength, hero2Agility, hero2Element);

//   return [hero1, hero2];
// };

// function boostHero(hero) {
//   switch (hero.element) {
//     case "огонь":
//       hero.strength += 20;
//       break;
//     case "воздух":
//       hero.strength += 15;
//       break;
//     case "вода":
//       hero.strength += 10;
//       break;
//     case "земля":
//       hero.strength += 5;
//       break;
//   };
// };

// function winnerFunc(hero1, hero2) {
//   if (hero1.strength > hero2.strength) {
//     return hero1.name;
//   } else if (hero1.strength === hero2.strength) {
//     if (hero1.agility > hero2.agility) {
//       return hero1.name;
//     } else if (hero1.agility === hero2.agility) {
//       return "Ничья";
//     } else {
//       return hero2.name;
//     }
//   } else {
//     return hero2.name;
//   }
// };

// function start() {
//   let heroes = createHeroes();
//   boostHero(heroes[0]);
//   boostHero(heroes[1]);
//   let winner = winnerFunc(heroes[0], heroes[1]);
//   alert(`${winner}`);
// };

// start();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//! extra

//1. Дан список товаров следующего вида:
//задача: запросить у пользователя информацию о том, какой телефон он бы хотел приобрести, затем предложить ему варианты расцветки телефона, после того как пользователь введет цвет, озвучить цену на товар и спросить будет ли он покупать, если ответ положительный то количество товара нужно уменьшить на 1, учесть, что товара может не быть на складе, в этом случае вывести сообщение типа: Извините, в данный момент товара нет на складе(решить с помощью функций)

// let arr = [
//   {
//       title: 'Samsung',
//       price: 1000,
//       count: 3,
//       color: ['black', 'white', 'blue']
//   },
//   {
//       title: 'Apple',
//       price: 1300,
//       count: 2,
//       color: ['green', 'space-gray']
//   },
//   {
//       title: 'Xiaomi',
//       price: 600,
//       count: 0,
//       color: []
//   },
//   {
//       title: 'LG',
//       price: 450,
//       count: 5,
//       color: ['black', 'white']
//   },
//   {
//       title: 'Sony',
//       price: 700,
//       count: 4,
//       color: ['white', 'yellow', 'gray']
//   }
// ];

// function buyPhone(arr) {
//   let phoneName = prompt("Какой телефон вы хотите купить?").toLocaleLowerCase();
//   for(let i of arr){
//     i.title = i.title.toLocaleLowerCase();
//   }
//   let phone = arr.find(phone => phone.title === phoneName);
//   if (!phone) {
//     alert("Телефон не найден!");
//     return;
//   };

//   let phoneColor = prompt("Какой цвет телефона вы хотите?");
//   let color = phone.color.find(color => color === phoneColor);
//   if (!color) {
//     alert("Такого цвета у телефона нет!");
//     return;
//   };
//   alert(`Цена телефона: ${phone.price} $`);

//   let answer = confirm("Хотите купить телефон?");
//   if (answer) {
//     if (phone.count === 0) {
//       alert("Извините, в данный момент товара нет на складе");
//       return;
//     };
//     phone.count--;
//     alert("Телефон успешно куплен!");
//   };
// };

// buyPhone(arr)
// console.log(arr);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2. Дан список дел в формате:
//задача: принимать от пользователя айди того, что он сделал и менять статус на true, также должна быть возможность добавлять новые пункты дел, учесть, что айди должен быть уникальным(решить с помощью функций)

// let arr = [
//   {
//       id: 1,
//       todo: 'Принять душ',
//       done: false
//   },
//   {
//       id: 2,
//       todo: 'Завтрак',
//       done: false
//   },
//   {
//       id: 3,
//       todo: 'Пойти на работу',
//       done: false
//   },
//   {
//       id: 4,
//       todo: 'Приготовить ужин',
//       done: false
//   },
//   {
//       id: 5,
//       todo: 'Лечь спать',
//       done: false
//   }
// ];

// function todoStatus(arr, id, newStatus) {
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i].id === id) {
//       arr[i].done = newStatus;
//       break;
//     };
//   };
// };

// function addTodo(arr, newTodo) {
//   let maxId = 0;
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i].id > maxId) {
//       maxId = arr[i].id;
//     };
//   };

//   arr.push({
//     id: maxId + 1,
//     todo: newTodo,
//     done: false
//   });
// };

// todoStatus(arr, 4, true);

// addTodo(arr, 'Навестить');

// console.log(arr);